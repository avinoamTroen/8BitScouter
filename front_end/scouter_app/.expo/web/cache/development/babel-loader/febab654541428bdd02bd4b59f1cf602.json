{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { INPUT_SERVER_IP_AND_PORT, PATH_TO_INPUT_ONE_SCOUT_JSON } from \"../utils/utils\";\nexport default sendOneScout = function sendOneScout(oneScout) {\n  var baseUrl, response;\n  return _regeneratorRuntime.async(function sendOneScout$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          baseUrl = INPUT_SERVER_IP_AND_PORT + PATH_TO_INPUT_ONE_SCOUT_JSON;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(baseUrl, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(oneScout)\n          }));\n\n        case 4:\n          response = _context.sent;\n          return _context.abrupt(\"return\", {\n            successful: response.ok,\n            msg: response.status\n          });\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", {\n            successful: false,\n            msg: _context.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 8]], Promise);\n};","map":{"version":3,"sources":["C:/Users/avino/OneDrive/Desktop/8bit_scouting/front_end/scouter_app/app/networking/send_things.js"],"names":["INPUT_SERVER_IP_AND_PORT","PATH_TO_INPUT_ONE_SCOUT_JSON","sendOneScout","oneScout","baseUrl","fetch","method","headers","body","JSON","stringify","response","successful","ok","msg","status"],"mappings":";AAAA,SAASA,wBAAT,EAAmCC,4BAAnC;AAGA,eAAeC,YAAY,GAAG,sBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMhBC,UAAAA,OANgB,GAMNJ,wBAAwB,GAAGC,4BANrB;AAAA;AAAA,2CAOCI,KAAK,CAACD,OAAD,EAAU;AAClCE,YAAAA,MAAM,EAAE,MAD0B;AAElCC,YAAAA,OAAO,EAAE;AACL,8BAAgB;AADX,aAFyB;AAKlCC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,QAAf;AAL4B,WAAV,CAPN;;AAAA;AAOhBQ,UAAAA,QAPgB;AAAA,2CAcf;AAAEC,YAAAA,UAAU,EAAED,QAAQ,CAACE,EAAvB;AAA2BC,YAAAA,GAAG,EAAEH,QAAQ,CAACI;AAAzC,WAde;;AAAA;AAAA;AAAA;AAAA,2CAgBf;AAAEH,YAAAA,UAAU,EAAE,KAAd;AAAqBE,YAAAA,GAAG;AAAxB,WAhBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B","sourcesContent":["import { INPUT_SERVER_IP_AND_PORT, PATH_TO_INPUT_ONE_SCOUT_JSON } from '../utils/utils'\r\n\r\n\r\nexport default sendOneScout = async (oneScout) => {\r\n    // accepts oneScout - a js object representing a single scout\r\n    // this function will return a resolved promise with an object consisting of two fields\r\n    // 1. successful - this will be a boolean value, 2. msg - this will be the error/success msg.\r\n    // using 2 will be for debugging purposes mainly, and possibly also to tell the user what happened\r\n    try {\r\n        const baseUrl = INPUT_SERVER_IP_AND_PORT + PATH_TO_INPUT_ONE_SCOUT_JSON\r\n        const response = await fetch(baseUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(oneScout)\r\n        })\r\n        return { successful: response.ok, msg: response.status };\r\n    } catch (error) {\r\n        return { successful: false, msg: error }\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}