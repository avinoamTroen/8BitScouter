{
  "ast": null,
  "code": "import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TopNav from \"../myComponents/TopNav\";\nimport store from \"../my_redux/store\";\nimport { setLevelClimbed, setClimbSuccessful, setClimbTime } from \"../my_redux/currentScouterActions\";\nimport { Formats } from \"../styles\";\nimport TitledChoiceList from \"../myComponents/ChoiceList\";\nimport TitledSwitch from \"../myComponents/TitledSwitch\";\nimport TitledNumInput from \"../myComponents/TitledNumInput\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function endGame(_ref) {\n  var navigation = _ref.navigation;\n\n  var goToNext = function goToNext() {\n    navigation.navigate('PostGame');\n  };\n\n  var goToNavigator = function goToNavigator() {\n    navigation.navigate('Navigator');\n  };\n\n  var goBack = function goBack() {\n    navigation.navigate('TeleOp');\n  };\n\n  var getClimbLevels = function getClimbLevels() {\n    return _toConsumableArray(Array(5).keys());\n  };\n\n  var climbLevels = getClimbLevels();\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsx(TopNav, {\n      goBack: goBack,\n      goToNavigator: goToNavigator\n    }), _jsx(View, {\n      style: Formats.EnglishLineContainer,\n      children: _jsx(TitledChoiceList, {\n        title: 'Climb Level',\n        array: climbLevels,\n        setCurrentChoice: function setCurrentChoice(newChoice) {\n          return store.dispatch(setLevelClimbed(newChoice));\n        },\n        getCurrentChoice: function getCurrentChoice() {\n          return store.getState().currentScout.levelClimbed;\n        }\n      })\n    }), _jsx(View, {\n      style: Formats.EnglishLineContainer,\n      children: _jsx(TitledSwitch, {\n        title: 'Climb Was Successful (false if the robot fell)',\n        setTruth: function setTruth(isTrue) {\n          return store.dispatch(setClimbSuccessful(isTrue));\n        },\n        getTruth: function getTruth() {\n          return store.getState().currentScout.climbSuccessful;\n        }\n      })\n    }), _jsx(View, {\n      style: Formats.EnglishLineContainer,\n      children: _jsx(TitledNumInput, {\n        setNum: function setNum(newNum) {\n          return store.dispatch(setClimbTime(newNum));\n        },\n        getNum: function getNum() {\n          return store.getState().currentScout.climbTime;\n        },\n        placeholder: \"Enter seconds here\",\n        title: \"Climb Time (seconds)\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: Formats.nextButton,\n      onPress: goToNext,\n      children: _jsx(Text, {\n        style: Formats.nextButtonText,\n        children: \"Next\"\n      })\n    })]\n  });\n}",
  "map": {
    "version": 3,
    "sources": [
      "C:/Users/avino/OneDrive/Desktop/8bit_scouting/front_end/scouter_app/app/screens/endGame.js"
    ],
    "names": [
      "React",
      "TopNav",
      "store",
      "setLevelClimbed",
      "setClimbSuccessful",
      "setClimbTime",
      "Formats",
      "TitledChoiceList",
      "TitledSwitch",
      "TitledNumInput",
      "endGame",
      "navigation",
      "goToNext",
      "navigate",
      "goToNavigator",
      "goBack",
      "getClimbLevels",
      "Array",
      "keys",
      "climbLevels",
      "flex",
      "EnglishLineContainer",
      "newChoice",
      "dispatch",
      "getState",
      "currentScout",
      "levelClimbed",
      "isTrue",
      "climbSuccessful",
      "newNum",
      "climbTime",
      "nextButton",
      "nextButtonText"
    ],
    "mappings": ";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,MAAP;AACA,OAAOC,KAAP;AACA,SAASC,eAAT,EAA0BC,kBAA1B,EAA8CC,YAA9C;AACA,SAASC,OAAT;AACA,OAAOC,gBAAP;AACA,OAAOC,YAAP;AACA,OAAOC,cAAP;;;AAEA,eAAe,SAASC,OAAT,OAAiC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAC5C,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnBD,IAAAA,UAAU,CAACE,QAAX,CAAoB,UAApB;AACH,GAFD;;AAGA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnBH,IAAAA,UAAU,CAACE,QAAX,CAAoB,MAApB;AACH,GAFD;;AAGA,MAAME,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBJ,IAAAA,UAAU,CAACE,QAAX,CAAoB,QAApB;AACH,GAFD;;AAIA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,8BAAWC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,EAAX;AACH,GAFD;;AAGA,MAAMC,WAAW,GAAGH,cAAc,EAAlC;AACA,SAEI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAE;AAAR,KAAb;AAAA,eACI,KAAC,MAAD;AACI,MAAA,MAAM,EAAEL,MADZ;AAEI,MAAA,QAAQ,EAAED;AAFd,MADJ,EAKI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAER,OAAO,CAACe,oBAArB;AAAA,gBACI,KAAC,gBAAD;AACI,QAAA,KAAK,EAAE,aADX;AAEI,QAAA,KAAK,EAAEF,WAFX;AAGI,QAAA,gBAAgB,EAAE,0BAACG,SAAD;AAAA,iBAAepB,KAAK,CAACqB,QAAN,CAAepB,eAAe,CAACmB,SAAD,CAA9B,CAAf;AAAA,SAHtB;AAII,QAAA,gBAAgB,EAAE,4BAAM;AAAE,iBAAQpB,KAAK,CAACsB,QAAN,GAAiBC,YAAjB,CAA8BC,YAAtC;AAAqD;AAJnF;AADJ,MALJ,EAcI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEpB,OAAO,CAACe,oBAArB;AAAA,gBACI,KAAC,YAAD;AACI,QAAA,KAAK,EAAE,gDADX;AAEI,QAAA,QAAQ,EAAE,kBAACM,MAAD;AAAA,iBAAYzB,KAAK,CAACqB,QAAN,CAAenB,kBAAkB,CAACuB,MAAD,CAAjC,CAAZ;AAAA,SAFd;AAGI,QAAA,QAAQ,EAAE;AAAA,iBAAMzB,KAAK,CAACsB,QAAN,GAAiBC,YAAjB,CAA8BG,eAApC;AAAA;AAHd;AADJ,MAdJ,EAsBI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEtB,OAAO,CAACe,oBAArB;AAAA,gBACI,KAAC,cAAD;AACI,QAAA,MAAM,EAAE,gBAACQ,MAAD;AAAA,iBAAY3B,KAAK,CAACqB,QAAN,CAAelB,YAAY,CAACwB,MAAD,CAA3B,CAAZ;AAAA,SADZ;AAEI,QAAA,MAAM,EAAE;AAAA,iBAAM3B,KAAK,CAACsB,QAAN,GAAiBC,YAAjB,CAA8BK,SAApC;AAAA,SAFZ;AAGI,QAAA,WAAW,EAAC,oBAHhB;AAII,QAAA,KAAK,EAAC;AAJV;AADJ,MAtBJ,EAkCI,KAAC,gBAAD;AACI,MAAA,KAAK,EAAExB,OAAO,CAACyB,UADnB;AAEI,MAAA,OAAO,EAAEnB,QAFb;AAAA,gBAGC,KAAC,IAAD;AAAM,QAAA,KAAK,EAAEN,OAAO,CAAC0B,cAArB;AAAA;AAAA;AAHD,MAlCJ;AAAA,IAFJ;AA2CH",
    "sourcesContent": [
      "import React from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\nimport TopNav from '../myComponents/TopNav';\r\nimport store from '../my_redux/store';\r\nimport { setLevelClimbed, setClimbSuccessful, setClimbTime } from '../my_redux/currentScouterActions';\r\nimport { Formats } from '../styles';\r\nimport TitledChoiceList from '../myComponents/ChoiceList';\r\nimport TitledSwitch from '../myComponents/TitledSwitch';\r\nimport TitledNumInput from '../myComponents/TitledNumInput';\r\n\r\nexport default function endGame({ navigation }) {\r\n    const goToNext = () => {\r\n        navigation.navigate('PostGame');\r\n    }\r\n    const goToNavigator = () => {\r\n        navigation.navigate('Navigator');\r\n    }\r\n    const goBack = () => {\r\n        navigation.navigate('TeleOp');\r\n    }\r\n\r\n    const getClimbLevels = () => {\r\n        return [...Array(5).keys()]\r\n    }\r\n    const climbLevels = getClimbLevels()\r\n    return (\r\n\r\n        <View style={{ flex: 1 }}>\r\n            <TopNav\r\n                goBack={goBack}\r\n                goToNavigator={goToNavigator}\r\n            />\r\n            <View style={Formats.EnglishLineContainer}>\r\n                <TitledChoiceList\r\n                    title={'Climb Level'}\r\n                    array={climbLevels}\r\n                    setCurrentChoice={(newChoice) => store.dispatch(setLevelClimbed(newChoice))}\r\n                    getCurrentChoice={() => { return (store.getState().currentScout.levelClimbed) }}\r\n                />\r\n\r\n            </View>\r\n            <View style={Formats.EnglishLineContainer}>\r\n                <TitledSwitch\r\n                    title={'Climb Was Successful (false if the robot fell)'}\r\n                    setTruth={(isTrue) => store.dispatch(setClimbSuccessful(isTrue))}\r\n                    getTruth={() => store.getState().currentScout.climbSuccessful}\r\n                />\r\n\r\n            </View>\r\n            <View style={Formats.EnglishLineContainer}>\r\n                <TitledNumInput\r\n                    setNum={(newNum) => store.dispatch(setClimbTime(newNum))}\r\n                    getNum={() => store.getState().currentScout.climbTime}\r\n                    placeholder=\"Enter seconds here\"\r\n                    title=\"Climb Time (seconds)\"\r\n                />\r\n\r\n            </View>\r\n\r\n\r\n\r\n            <TouchableOpacity\r\n                style={Formats.nextButton}\r\n                onPress={goToNext}\r\n            ><Text style={Formats.nextButtonText}>Next</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n}"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
