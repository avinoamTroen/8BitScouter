{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport DefaultTouchableComponent from \"./DefaultTouchableComponent\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar MultipleChoice = function (_Component) {\n  _inherits(MultipleChoice, _Component);\n\n  var _super = _createSuper(MultipleChoice);\n\n  function MultipleChoice() {\n    var _this;\n\n    _classCallCheck(this, MultipleChoice);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.renderCustomItem = function (renderCustomItem) {\n      return _jsx(View, {\n        style: {\n          marginLeft: 8\n        },\n        children: renderCustomItem()\n      });\n    };\n\n    _this.renderDefaultItem = function (index, _onPress, color, fontWeight, item) {\n      return _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          _onPress(index);\n        },\n        children: _jsx(Text, {\n          style: {\n            color: color,\n            marginLeft: 8,\n            fontWeight: fontWeight\n          },\n          children: item\n        })\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(MultipleChoice, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          style = _this$props.style,\n          direction = _this$props.direction,\n          chosenColor = _this$props.chosenColor,\n          TouchableComponent = _this$props.TouchableComponent,\n          choices = _this$props.choices,\n          chosenTextColor = _this$props.chosenTextColor,\n          _onPress2 = _this$props.onPress,\n          chosenIndex = _this$props.chosenIndex,\n          outerRound = _this$props.outerRound,\n          renderCustomItem = _this$props.renderCustomItem,\n          customIndex = _this$props.customIndex,\n          innerRound = outerRound * 3.5 / 5,\n          isColumnDirection = direction === 'column',\n          columnStyle = {\n        flexDirection: 'row',\n        marginTop: 16\n      },\n          itemViewStyle = isColumnDirection ? columnStyle : styles.itemView;\n      return _jsx(View, {\n        style: [styles.container, style, {\n          flexDirection: direction\n        }],\n        children: choices.map(function (item, index) {\n          var isChosen = chosenIndex === index,\n              defaultTextColor = isChosen ? chosenTextColor : 'black',\n              fontWeight = isChosen ? 'bold' : 'normal';\n          return _jsxs(View, {\n            style: itemViewStyle,\n            children: [_jsx(TouchableComponent, {\n              size: outerRound,\n              innerChosenSize: innerRound,\n              onPress: function onPress() {\n                _onPress2(index);\n              },\n              isChosen: isChosen,\n              innerChosenColor: chosenColor\n            }), index === customIndex ? _this2.renderCustomItem(renderCustomItem) : _this2.renderDefaultItem(index, _onPress2, defaultTextColor, fontWeight, item)]\n          }, index);\n        })\n      });\n    }\n  }]);\n\n  return MultipleChoice;\n}(Component);\n\nMultipleChoice.defaultProps = {\n  style: {},\n  direction: 'row',\n  chosenColor: '#e2641e',\n  TouchableComponent: DefaultTouchableComponent,\n  choices: [],\n  chosenIndex: 0,\n  chosenTextColor: '#e2641e',\n  onPress: function onPress() {},\n  outerRound: 24,\n  innerRound: 24 * 3.5 / 5,\n  renderCustomItem: function renderCustomItem() {},\n  customIndex: -1\n};\nexport { MultipleChoice as default };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingHorizontal: 16\n  },\n  itemView: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/avino/OneDrive/Desktop/8bit_scouting/front_end/scouter_app/node_modules/react-native-multiple-choice-picker/src/MultipleChoice/index.js"],"names":["React","Component","DefaultTouchableComponent","MultipleChoice","renderCustomItem","marginLeft","renderDefaultItem","index","onPress","color","fontWeight","item","props","style","direction","chosenColor","TouchableComponent","choices","chosenTextColor","chosenIndex","outerRound","customIndex","innerRound","isColumnDirection","columnStyle","flexDirection","marginTop","itemViewStyle","styles","itemView","container","map","isChosen","defaultTextColor","defaultProps","StyleSheet","create","justifyContent","paddingHorizontal","alignItems"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet } from 'react-native';\nimport DefaultTouchableComponent from './DefaultTouchableComponent';\n\ntype Props = {\n\tstyle?: any,\n\tdirection?: string,\n\tchosenColor?: string,\n\tTouchableComponent?: any,\n\tchoices: any,\n\tchosenIndex?: number,\n\tchosenTextColor?: string,\n\tonPress?: any,\n\tinnerRound?: number,\n\touterRound?: number,\n\trenderCustomItem?: any,\n\tcustomIndex?: number\n};\n\nexport default class MultipleChoice extends Component {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tstyle: {},\n\t\tdirection: 'row',\n\t\tchosenColor: '#e2641e',\n\t\tTouchableComponent: DefaultTouchableComponent,\n\t\tchoices: [],\n\t\tchosenIndex: 0,\n\t\tchosenTextColor: '#e2641e',\n\t\tonPress: () => {},\n\t\touterRound: 24,\n\t\tinnerRound: 24 * 3.5 / 5,\n\t\trenderCustomItem: () => {\n\t\t},\n\t\tcustomIndex: -1\n\t};\n\n\trender() {\n\t\tconst {\n\t\t\t\tstyle, direction, chosenColor, TouchableComponent, choices, chosenTextColor,\n\t\t\t\tonPress, chosenIndex, outerRound, renderCustomItem, customIndex\n\t\t\t} = this.props,\n\t\t\tinnerRound = outerRound * 3.5 / 5,\n\t\t\tisColumnDirection = direction === 'column',\n\t\t\tcolumnStyle = {\n\t\t\t\tflexDirection: 'row',\n\t\t\t\tmarginTop: 16\n\t\t\t},\n\t\t\titemViewStyle = isColumnDirection ? columnStyle : styles.itemView;\n\t\treturn (\n\t\t\t<View style={[styles.container, style, { flexDirection: direction }]}>\n\t\t\t\t{choices.map((item, index) => {\n\t\t\t\t\tconst isChosen = chosenIndex === index,\n\t\t\t\t\t\tdefaultTextColor = isChosen ? chosenTextColor : 'black',\n\t\t\t\t\t\tfontWeight = isChosen ? 'bold' : 'normal';\n\t\t\t\t\treturn <View\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\tstyle={itemViewStyle}>\n\t\t\t\t\t\t<TouchableComponent\n\t\t\t\t\t\t\tsize={outerRound}\n\t\t\t\t\t\t\tinnerChosenSize={innerRound}\n\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\tonPress(index);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tisChosen={isChosen}\n\t\t\t\t\t\t\tinnerChosenColor={chosenColor}/>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tindex === customIndex\n\t\t\t\t\t\t\t\t? this.renderCustomItem(renderCustomItem)\n\t\t\t\t\t\t\t\t: this.renderDefaultItem(index, onPress, defaultTextColor, fontWeight, item)\n\t\t\t\t\t\t}\n\t\t\t\t\t</View>;\n\t\t\t\t})}\n\t\t\t</View>\n\t\t);\n\t}\n\n\trenderCustomItem = (renderCustomItem) => {\n\t\treturn <View style={{\n\t\t\tmarginLeft: 8\n\t\t}}>\n\t\t\t{ renderCustomItem() }\n\t\t</View>;\n\t};\n\n\trenderDefaultItem = (index, onPress, color, fontWeight, item) => {\n\t\treturn <TouchableOpacity onPress={() => {\n\t\t\tonPress(index);\n\t\t}}>\n\t\t\t<Text\n\t\t\t\tstyle={{\n\t\t\t\t\tcolor,\n\t\t\t\t\tmarginLeft: 8,\n\t\t\t\t\tfontWeight\n\t\t\t\t}}>{item}</Text>\n\t\t</TouchableOpacity>;\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'space-around',\n\t\tpaddingHorizontal: 16\n\t},\n\titemView: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t}\n});\n"]},"metadata":{},"sourceType":"module"}